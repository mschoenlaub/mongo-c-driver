<page xmlns="http://projectmallard.org/1.0/"
      type="topic"
      id="application-performance-monitoring">
  <info><link xref="index#apm" type="guide"/></info>
  <title>Introduction to Application Performance Monitoring (APM)</title>

  <p>The MongoDB C Driver allows you to monitor all the MongoDB operations the driver executes. This event-notification system conforms to two MongoDB driver specs:</p>
  <list>
    <item><p><link href="https://github.com/mongodb/specifications/blob/master/source/command-monitoring/command-monitoring.rst">Command Monitoring</link>: events related to all application operations.</p></item>
    <item><p><link href="https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring-monitoring.rst">SDAM Monitoring</link>: events related to the driver's Server Discovery And Monitoring logic.</p></item>
  </list>
  <p>To receive notifications, create a <code>mongoc_apm_callbacks_t</code> with <code xref="mongoc_apm_callbacks_new">mongoc_apm_callbacks_new</code>, set callbacks on it, then pass it to <code xref="mongoc_client_set_apm_callbacks">mongoc_client_set_apm_callbacks</code> or <code xref="mongoc_client_pool_set_apm_callbacks">mongoc_client_pool_set_apm_callbacks</code>.</p>

  <section id="command-monitoring-example">
    <title>Command-Monitoring Example</title>
    <synopsis><code mime="text/x-csrc"><include parse="text" href="../examples/example-command-monitoring.c" xmlns="http://www.w3.org/2001/XInclude" /></code></synopsis>

    <p>This example program prints:</p>

    <synopsis><code><![CDATA[Command drop started on 127.0.0.1:
{ "drop" : "test" }

Command drop failed:
"ns not found"

Command insert started on 127.0.0.1:
{ "insert" : "test", "documents" : [ { "_id" : 1 } ] }

Command insert succeeded:
{ "ok" : 1, "n" : 1 }

Command insert started on 127.0.0.1:
{ "insert" : "test", "documents" : [ { "_id" : 1 } ] }

Command insert succeeded:
{ "ok" : 1,
  "n" : 0,
  "writeErrors" : [ {
     "index" : 0, "code" : 11000,
     "errmsg" : "E11000 duplicate key error"
} ] }]]>

started: 3
succeeded: 2
failed: 1</code></synopsis>

    <p>In older versions of the MongoDB wire protocol, queries and write operations are sent to the server with special <link href="https://docs.mongodb.org/manual/reference/mongodb-wire-protocol/#request-opcodes">opcodes</link>, not as commands. To provide consistent event notifications with any MongoDB version, these legacy opcodes are reported as if they had used modern commands.</p>
    <p>The final "insert" command is considered successful, despite the writeError, because the server replied to the overall command with <code>"ok": 1</code>.</p>
  </section>

  <section id="sdam-monitoring-example">
    <title>SDAM Monitoring Example</title>
    <synopsis><code mime="text/x-csrc"><include parse="text" href="../examples/example-sdam-monitoring.c" xmlns="http://www.w3.org/2001/XInclude" /></code></synopsis>

    <p>Start a 3-node replica set on localhost with set name "rs" and start the program:</p>
    <code>./example-sdam-monitoring "mongodb://localhost:27017,localhost:27018/?replicaSet=rs"</code>
    <p>This example program prints something like:</p>

    <synopsis><code><![CDATA[topology opening
topology changed: Unknown -> ReplicaSetNoPrimary
server opening: localhost:27017
server opening: localhost:27018
localhost:27017 heartbeat started
localhost:27018 heartbeat started
localhost:27017 heartbeat succeeded: { ... reply ... }
server changed: localhost:27017 Unknown -> RSPrimary
server opening: localhost:27019
topology changed: ReplicaSetNoPrimary -> ReplicaSetWithPrimary
  new servers:
      RSPrimary localhost:27017
localhost:27019 heartbeat started
localhost:27018 heartbeat succeeded: { ... reply ... }
server changed: localhost:27018 Unknown -> RSSecondary
topology changed: ReplicaSetWithPrimary -> ReplicaSetWithPrimary
  previous servers:
      RSPrimary localhost:27017
  new servers:
      RSPrimary localhost:27017
      RSSecondary localhost:27018
localhost:27019 heartbeat succeeded: { ... reply ... }
server changed: localhost:27019 Unknown -> RSSecondary
topology changed: ReplicaSetWithPrimary -> ReplicaSetWithPrimary
  previous servers:
      RSPrimary localhost:27017
      RSSecondary localhost:27018
  new servers:
      RSPrimary localhost:27017
      RSSecondary localhost:27018
      RSSecondary localhost:27019
topology closed

Events:
   server changed: 3
   server opening: 3
   server closed: 0
   topology changed: 4
   topology opening: 1
   topology closed: 1
   heartbeat started: 3
   heartbeat succeeded: 3
   heartbeat failed: 0]]></code></synopsis>
    <p>The driver discovers the third member, "localhost:27019", and adds it to the topology.</p>
  </section>

</page>
